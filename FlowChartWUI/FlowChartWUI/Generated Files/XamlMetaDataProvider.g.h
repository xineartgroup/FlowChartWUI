// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220929.3

#pragma once
#include "winrt/FlowChartWUI.h"
#include "winrt/Microsoft.UI.Xaml.Markup.h"
namespace winrt::FlowChartWUI::implementation
{
    template <typename D, typename... I>
    struct __declspec(empty_bases) XamlMetaDataProvider_base : implements<D, FlowChartWUI::XamlMetaDataProvider, I...>
    {
        using base_type = XamlMetaDataProvider_base;
        using class_type = FlowChartWUI::XamlMetaDataProvider;
        using implements_type = typename XamlMetaDataProvider_base::implements_type;
        using implements_type::implements_type;
        
        hstring GetRuntimeClassName() const
        {
            return L"FlowChartWUI.XamlMetaDataProvider";
        }
    };
}
namespace winrt::FlowChartWUI::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct __declspec(empty_bases) XamlMetaDataProviderT : implements<D, winrt::Windows::Foundation::IActivationFactory, I...>
    {
        using instance_type = FlowChartWUI::XamlMetaDataProvider;

        hstring GetRuntimeClassName() const
        {
            return L"FlowChartWUI.XamlMetaDataProvider";
        }
        auto ActivateInstance() const
        {
            return make<T>();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_XAMLMETADATAPROVIDER_XAML_G_H) || __has_include("XamlMetaDataProvider.xaml.g.h")

#include "XamlMetaDataProvider.xaml.g.h"

#else

namespace winrt::FlowChartWUI::implementation
{
    template <typename D, typename... I>
    using XamlMetaDataProviderT = XamlMetaDataProvider_base<D, I...>;
}

#endif
